services:
  api:
    image: vegangouda-api:latest
    env_file:
      - .env
      - .env.local
      - .env.${NODE_ENV:-development}
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgres://testuser:testpassword@postgres:5432/vegangoudadb}
    ports:
      - target: 3000
        published: ${API_PORT:-3000}
        protocol: tcp
        mode: ingress
    networks:
      - webnet
      - dbnet
    deploy:
      replicas: ${API_REPLICAS:-1}
      placement:
        constraints:
          - node.labels.role_api == true
      update_config:
        parallelism: ${API_PARALLELISM:-1}
        delay: 10s
      restart_policy:
        condition: on-failure

  web:
    image: vegangouda-web:latest
    env_file:
      - .env
      - .env.local
      - .env.${NODE_ENV:-development}
    environment:
      API_URL: ${API_URL:-http://api:3000}
    ports:
      - target: 80
        published: ${WEB_PORT:-80}
        protocol: tcp
        mode: ingress
    networks:
      - webnet
    deploy:
      replicas: ${WEB_REPLICAS:-1}
      placement:
        constraints:
          - node.labels.role_web == true
      update_config:
        parallelism: ${WEB_PARALLELISM:-1}
        delay: 10s
      restart_policy:
        condition: on-failure

  postgres:
    image: postgres:latest
    env_file:
      - .env
      - .env.local
      - .env.${NODE_ENV:-development}
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-vegangoudadb}
      POSTGRES_USER: ${POSTGRES_USER:-testuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-testpassword}
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - target: 5432
        published: ${POSTGRES_PORT:-5432}
        protocol: tcp
        mode: ingress
    networks:
      - dbnet
    deploy:
      replicas: ${DB_REPLICAS:-1}
      placement:
        constraints:
          - node.labels.role_db == true
      update_config:
        parallelism: ${DB_PARALLELISM:-1}
        delay: 10s
      restart_policy:
        condition: on-failure

  portainer:
    image: portainer/portainer-ce:latest
    command: -H unix:///var/run/docker.sock
    ports:
      - target: 9000
        published: 9000
        protocol: tcp
        mode: ingress
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    deploy:
      placement:
        constraints:
          - node.role == manager

networks:
  webnet:
  dbnet:

volumes:
  pgdata:
    driver: local
  portainer_data:
    driver: local
